---
title: "AVALIA 2023.4"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(dplyr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(shiny)
library(rmarkdown)
library(reshape2)


caminho <- "C:/Users/DIAVI/Documents/dashboard/data_test.xlsx"

#base AVALIA
dataSource <- "C:/Users/DIAVI/Documents/dashboard/Avalia20234.xlsx"
dataBase <- read_excel(dataSource)

##FUNÇÕES

#calculo percentural colunas
calculoPercent <- function(alternativas, vetorContagem){
    somaContagem <- sapply(alternativas, function(valor) {
      sum(sapply(vetorContagem, function(tabela){
        if (as.character(valor) %in% names(tabela)){
          return(tabela[as.character(valor)])
        }
        else {
          return(0)
        }
      }), na.rm = TRUE)
    })
    
    percentuais <- (somaContagem / sum(somaContagem)) * 100
    
    return(percentuais)
}

#grafico contagem
graficoContagem <- function(df, dimensao, conceito, valores){
  graficoC <<- ggplot(df, aes(x=dimensao, y=valores, fill=conceito))+
    geom_bar(stat="identity", position = position_dodge(width=0.95))+ 
    scale_fill_manual(values = c ("#1D556F", "#288FB4", "#F0B775", "#FA360A")) +
    geom_text(aes(label = round(valores,2)), vjust = -0.8, position = position_dodge(width = 0.9), size = 4, family = "sans", colour = "#494953") + 
    theme_minimal() +
    labs(x = NULL, y ="Percentual") + 
    scale_y_continuous(limits = c(0,100)) + 
    theme(panel.grid.major.x = element_blank()) +
    theme(legend.position = "right", 
          legend.title = element_blank(), 
          legend.text = element_text(size=10),
          axis.text.x = element_text(size=10.8),
          axis.text.y = element_text(size=9.6),
          axis.title.y = element_text(size=11.3))
  return(graficoC)
}

#grafico media
graficoMedia <- function(df, medias, dimensoes) {
  graficoM <<- ggplot(df, aes(x= dimensoes, y=medias, width=0.6)) +
    geom_bar(stat = "identity", fill = "#288FB4") +
    geom_text(aes(label = round(medias, 2)), vjust = -0.5, size=4.3) +
    labs(x=NULL, y=NULL) +
  #  scale_y_continuous( limits = c(1,4), breaks = seq(1, 4, 0.5) )
    scale_y_continuous(limits = c(0, 4)) +
    theme_minimal() +
    theme(panel.grid.major.x = element_blank(),
          axis.text.x = element_text(size=12.3),
          axis.text.y = element_text(size=11))
  
  print(graficoM)
}

#filtro dos dados
filtered_data <- reactive({
  data <- dataBase
  if (input$campus != "all"){
    data <- data %>% filter(CAMPUS == input$campus)
    
    if (input$curso != "all"){
      data <- data %>% filter(CURSO == input$curso)
      
      if (input$turno != "all"){
        data <- data %>% filter(TURNO == input$turno)
      }}
  }
  
  return (data)
})
```

```{r}
renderPlot({
  data <- filtered_data()
  
  data <- data.frame(
    disciplina = dataBase$ID,
    media = dataBase$mediap111
  )
  
  # Remover duplicatas considerando as disciplinas
  df_unico <- data %>%
    distinct(disciplina, media, .keep_all = TRUE)
  
  # Contar o número de linhas na coluna media
  num_linhas <- nrow(df_unico)
  
  #print(df_unico)
  print(paste("Número de linhas únicas na coluna media:", num_linhas))
})

```
  
Sidebar {.sidebar}
=====================================
```{r}
#Filtros

selectInput(
  inputId="campus",
  choices = c("Todos" = "all", sort(unique(dataBase$CAMPUS))),
  label="Campus")

selectInput(
  inputId = "curso",
  label = "Curso",
  choices = c("Todos" = "all", sort(unique(dataBase$CURSO)))
)

selectInput(
  inputId = "turno",
  label = "Turno",
  choices = c("Todos" = "all", sort(unique(dataBase$TURNO)))
)

#filtros dinamicos OBS ENXUTAR O CODIGO
observeEvent(input$campus, {
  if (input$campus == "all") {
    updateSelectInput(
      inputId = "curso",
      choices = c("Todos" = "all", sort(unique(dataBase$CURSO))))
  } else {
    updateSelectInput(
      inputId = "curso",
      choices = c("Todos" = "all", dataBase %>%
        filter(CAMPUS == input$campus) %>%
        pull(CURSO) %>%
        unique()))}
})

observeEvent(input$campus, {
  if (input$campus == "all") {
    updateSelectInput(
      inputId = "curso",
      choices = c("Todos" = "all", sort(unique(dataBase$CURSO))))
  } else {
    updateSelectInput(
      inputId = "curso",
      choices = c("Todos" = "all", dataBase %>%
        filter(CAMPUS == input$campus) %>%
        pull(CURSO) %>%
        unique()))}
})

observeEvent(input$curso, {
  if (input$curso == "all") {
    if (input$campus == "all") {
      updateSelectInput(
        inputId = "turno",
        choices = c("Todos" = "all", unique(dataBase$TURNO)))
    } else {
      updateSelectInput(
        inputId = "turno",
        choices = c("Todos" = "all", dataBase %>%
          filter(CAMPUS == input$campus) %>%
          pull(TURNO) %>%
          unique()))}
  } else {
    if (input$campus == "all") {
      updateSelectInput(
        inputId = "turno",
        choices = c("Todos" = "all", dataBase %>%
          filter(CURSO == input$curso) %>%
          pull(TURNO) %>%
          unique()))
    } else {
      updateSelectInput(
        inputId = "turno",
        choices = c("Todos" = "all", dataBase %>%
          filter(CAMPUS == input$campus & CURSO == input$curso) %>%
          pull(TURNO) %>%
          unique())
      )}}
})
```

```{r}
#botao baixar relatorio

actionButton("openDocument", "Abrir Relatório")
downloadButton("downloadData", "Baixar Relatório")

output$downloadData <- downloadHandler(
  filename = function() {paste("relatorio_", input$campus, ".pdf", sep = "")},
  content = function(file) {rmarkdown::render("relatorio.Rmd", output_file = file, params = list(plot = output$chartA))}
)

#output$openDocument <- knit(output = "relatorio.Rmd")
observeEvent(input$openDocument, {output_file <- tempfile(fileext = ".pdf")
rmarkdown::render("relatorio.Rmd", output_format = "pdf_document", output_file = output_file)
browseURL(output_file)})
```


Dimensões Geral
=====================================  
    
Column {data-width=600}
-------------------------------------
    
### Proporções de respostas dadas por Dimensão
```{r}
renderPlot({
  data_filtered <- filtered_data()
  
  contagensDisc <- lapply(data_filtered[, 40:46], table)
  contagensDoc <- lapply(data_filtered[, 47:62], table)
  contagensInfra <- lapply(data_filtered[, 63:66], table)
  
  alternativas <- c(1, 2, 3, 4)
  
  percentDisc <- calculoPercent(alternativas, contagensDisc)
  percentDoc <- calculoPercent(alternativas, contagensDoc)
  percentInfra <- calculoPercent(alternativas, contagensInfra)
  
  dfDiscente <- data.frame(
  dimensao = rep(c("Auto Avaliação Discente", "Ação Docente", "Instalações Físicas"), each = length(percentDisc)),
  conceito = rep(c("Insuficiente", "Regular", "Bom", "Excelente"), times = 3),
  valores = c(percentDisc, percentDoc, percentInfra)
)
  
  dfDiscente$conceito <- factor(dfDiscente$conceito, levels = c("Excelente", "Bom", "Regular", "Insuficiente"))
  
  contagemDG <<-  graficoContagem(dfDiscente, dfDiscente$dimensao, dfDiscente$conceito, dfDiscente$valores)
  print(contagemDG)
})
```
   
Column {data-width=400}
-------------------------------------

### Médias por Dimensão
```{r}
renderPlot({
  data <- filtered_data()
  
  mediasAcaoDocente <- colMeans(data[, 47:62])
  mediasAvDiscente <- colMeans(data[, 40:46])
  mediasInfra <- colMeans(data[, 63:66])
  
  df <- data.frame(mediasDimensoes = c(mean(mediasAvDiscente), mean(mediasAcaoDocente), mean(mediasInfra)),
                   dimensoes = c("Autoavaliação Discente", "Ação Docente", "Instalações Físicas"))
  mediasDG <<- graficoMedia(df, df$mediasDimensoes, df$dimensoes)
  print(mediasDG)
})
```   
 


### boxplot das medias
```{r}

```


Autoavaliação Discente {data-orientation=rows}
=====================================     
   
Row {data-height=500}
-------------------------------------

###  Proporções de respostas dadas aos itens relacionados à Autoavaliação Discente
```{r}
renderPlot({
  data <- filtered_data()
  
  contagemD <- lapply(data[, 40:46], table)
  
  alternativas <- c(1,2,3,4)
  
  percentuaisD <- lapply(contagemD, function(tabela) {
  # Dividir cada valor na tabela pelo total de contagens da questão
  percentuais <- (tabela / sum(tabela)) * 100
  # Garantir que todas as alternativas estejam presentes, mesmo se não aparecerem na tabela
  percentuais_completos <- sapply(alternativas, function(alt) {
    if (as.character(alt) %in% names(percentuais)) {
      return(percentuais[as.character(alt)])
    } else {
      return(0)
    }
  })
  return(percentuais_completos)
  })

  df <- data.frame(percentuaisD)
  
  dfLong <- reshape2::melt(df, varnames = "questoes", value.name = "valores")
  
  dfLong$conceito <- rep(c("Insuficiente", "Regular", "Bom", "Excelente"), times = ncol(df))
  
  dfDisc <- data.frame(
  questoes = rep(c("1.1.1", "1.1.2", "1.1.3", "1.1.4", "1.1.5", "1.1.6", "1.1.7"), each = 4),
  conceito = factor(dfLong$conceito, levels = c("Excelente", "Bom", "Regular", "Insuficiente")),
  valores = dfLong$valores)
  
  contagemDisc <<- graficoContagem(dfDisc, dfDisc$questoes, dfDisc$conceito, dfDisc$valores)
  print(contagemDisc)
  
})
```

Row {data-height=500}
-------------------------------------
   

### Médias dos itens relacionados à Autoavaliação Discente
```{r}
renderPlot({
  data <- filtered_data()
  
  mediasDiscente <- colMeans(data[, 40:46])
  
  df <- data.frame(medias = mediasDiscente,
                   questoes = c("1.1.1", "1.1.2", "1.1.3", "1.1.4", "1.1.5", "1.1.6", "1.1.7"))
  mediasDisc <<- graficoMedia(df, df$medias, df$questoes)
  print(mediasDisc)
})
```   
    

### Boxplot Discente
```{r, echo=FALSE, warning=FALSE, message=FALSE}
suppressWarnings({ 
  renderPlot({
  
  data_filtered <- filtered_data()
  
  data_filtered <- data_filtered %>%
    distinct(mediap111, mediap112, mediap113, mediap114, mediap115, mediap116, mediap117, .keep_all = TRUE)
  
  data_filtered <- data_filtered %>%
    pivot_longer(
      cols = c(mediap111, mediap112, mediap113, mediap114, mediap115, mediap116, mediap117),
      names_to = "Variavel",
      values_to = "Valor"
    )

  boxplotGraph <<-
    ggplot(data_filtered, aes(x = Variavel, y = Valor)) +
    scale_x_discrete(labels = c("mediap111" = "1.1.1",
                              "mediap112" = "1.1.2",
                              "mediap113" = "1.1.3",
                              "mediap114" = "1.1.4",
                              "mediap115" = "1.1.5",
                              "mediap116" = "1.1.6",
                              "mediap117" = "1.1.7")) +
    stat_boxplot(geom = "errorbar",
               width = 0.6)+
    geom_boxplot(outlier.color = "#B4B4B8", fill = "#288FB4") +
    theme_minimal() +
    theme(axis.text.x = element_text(size=10.3)) +
    labs(title = "Auto Avaliação Discente", x = NULL, y = "Média")
  
  print(boxplotGraph)
})

})

```

Avaliação Ação Docente {data-orientation=rows}
=====================================     
   
Row {data-height=600}
-------------------------------------

###  Proporções de respostas por Subdimensão da Avaliação da Ação Docente
```{r}
renderPlot({
  data <- filtered_data()
  
  contagem21 <- lapply(data[, 47:50], table)
  contagem22 <- lapply(data[, 51:58], table)
  contagem23 <- lapply(data[, 59:62], table)
  
  alternativas <- c(1,2,3,4)
  
  dfDoc <- data.frame(subdimensoes = c("Atitude Profissional", "Gestão Didática", "Processo Avaliativo"),
                       conceito = rep(c("Insuficiente", "Regular", "Bom", "Excelente"), times = 3),
                       valores = c( calculoPercent(alternativas,contagem21), calculoPercent(alternativas,contagem22), calculoPercent(alternativas,contagem23)))
  
  dfDoc$conceito <- factor(dfDoc$conceito, levels = c("Excelente", "Bom", "Regular", "Insuficiente"))
  
  contagemDoc <<- graficoContagem(dfDoc, dfDoc$subdimensoes, dfDoc$conceito, dfDoc$valores)
  print(contagemDoc)
})
```

Row {data-height=400}
-------------------------------------
   
### Médias por Subdimensão da Avaliação da Ação Docente
```{r}
renderPlot({
  data <- filtered_data()
  
  medias21 <- colMeans(data[, 46:49])
  medias22 <- colMeans(data[, 50:57])
  medias23 <- colMeans(data[, 58:61])
  
  df <- data.frame(medias = c( mean(medias21), mean(medias22), mean(medias23) ),
                   subdimensoes = c("Atitude Profissional", "Gestão Didática", "Processo Avaliativo"))
  mediasDoc <<- graficoMedia(df, df$medias, df$subdimensoes)
  print(mediasDoc)
})
```   

### grafico boxplot
