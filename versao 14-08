MAIN RMD 

---
title: "Untitled"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
---
  
```{r setup, include=FALSE}
library(flexdashboard)
library(dplyr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(shiny)
library(rmarkdown)
library(googlesheets4)

caminho <- "C:/Users/DIAVI/Documents/dashboard/data_test.xlsx"

#base AVALIA
dataSource <- "C:/Users/DIAVI/Documents/dashboard/Avalia2023.xlsx"
dataBase <- read_excel(dataSource)

```

Column {.sidebar}
-----------------------------------------------------------------------
```{r}

selectInput(inputId="campus", 
            choices = c("Todos" = "all", unique(dataBase$CAMPUS)), 
            label="Campus")

selectInput(
  inputId = "uni_acad",
  label = "Unidade Acadêmica",
  choices = c("Todos" = "all", unique(dataBase$UND_ACAD))
)


actionButton("openDocument", "Abrir Relatório")
downloadButton("downloadData", "Baixar Relatório")

```


Column {data-width=650}
-----------------------------------------------------------------------

### Chart A

```{r}
plotOutput("chartA")

output$chartA <- renderPlot({
  dados_long <- dataBase
  
  if (input$uni_acad != "all"){
    dados_long <- dados_long %>%
      filter(UND_ACAD == input$uni_acad)
  }
  
  dados_long <- dados_long %>%
    pivot_longer(
      cols = c(P111, P112, P113, P114, P115, P116, P117),
      names_to = "Variavel",
      values_to = "Valor"
    )
  
  boxplotGraph <<-
    ggplot(dados_long, aes(x = Variavel, y = Valor, fill = Variavel)) +
    geom_boxplot() +
    theme_minimal() +
    labs(title = "Auto Avaliação Discente", x = "Variável", y = "Valor")
  
  print(boxplotGraph)
})

output$downloadData <- downloadHandler(
  filename = function() {paste("relatorio_", input$municipio, ".pdf", sep = "")},
  content = function(file) {rmarkdown::render("relatorio.Rmd", output_file = file, params = list(plot = output$chartA))}
)

#output$openDocument <- knit(output = "relatorio.Rmd")
observeEvent(input$openDocument, {output_file <- tempfile(fileext = ".pdf")
rmarkdown::render("relatorio.Rmd", output_format = "pdf_document", output_file = output_file)
browseURL(output_file)})

```

Column {data-width=350}
-----------------------------------------------------------------------
  
### Chart B
  
```{r}

renderPlot({
  
  data <- dataBase
  
  if (input$campus != "all"){
    data <- data %>% filter(CAMPUS == input$campus)
  }
  
  colsAvDisc <- c("P111", "P112", "P113", "P114", "P115", "P116", "P117")

  # Contar as frequências para cada coluna e armazenar em uma lista
  contagensColunas <- lapply(colsAvDisc, function(coluna) table(data[[coluna]]))
  contagensDoc <- lapply(data[, 16:31], table)
  contagensInfra <- lapply(data[, 32:35], table)
  
  print(contagensDoc)
  
  # Nomear os elementos da lista
  names(contagensColunas) <- colsAvDisc
  
  alternativas <- c(1, 2, 3, 4)
  
  #função calculo percentual
  
  calculoPercent <- function(alternativas, vetorContagem){
    somaContagem <- sapply(alternativas, function(valor) {
      sum(sapply(vetorContagem, function(tabela){
        if (as.character(valor) %in% names(tabela)){
          return(tabela[as.character(valor)])
        }
        else {
          return(0)
        }
      }), na.rm = TRUE)
    })
    
    percentuais <- (somaContagem / sum(somaContagem)) * 100
    
    return(percentuais)
  }
  
  print("teste funcao")
  
  percentDisc <- calculoPercent(alternativas, contagensColunas)
  print(percentDisc)
  percentDoc <- calculoPercent(alternativas, contagensDoc)
  print(percentDoc)
  percentInfra <- calculoPercent(alternativas, contagensInfra)
  
  print("FIM TESTE")
  
  dfDiscente <- data.frame(
  dimensao = rep(c("Auto Avaliação Discente", "Ação Docente", "Instalações Físicas"), each = length(percentDisc)),
  conceito = rep(c("Insuficiente", "Regular", "Bom", "Excelente"), times = 3),
  valores = c(percentDisc, percentDoc, percentInfra)
)
  
  colunaAgrupada <<- ggplot(dfDiscente, aes( x=dimensao, y=valores, fill=conceito)) +
    geom_bar(stat="identity", position = "dodge")+ 
    geom_text(aes(label = round(valores,2)), vjust = -0.5, position = position_dodge(width = 0.9)) +
    theme_minimal() +
    labs(title = "Gráfico de Colunas Agrupadas", x = "Conceito", y = "Frequência")
 
  print(colunaAgrupada)
})

```

### Chart C

```{r}
renderPlot({
  filtered_data <- dataBase #%>% filter(campus == input$CAMPUS)
  
  # Calcular as médias das colunas numéricas após a filtragem
  medias_filtered_data <- colMeans(filtered_data[, 9:15])

  # Criar dataframe para as médias filtradas
  df_medias_filtradas <- data.frame(Questao = names(medias_filtered_data), Media = medias_filtered_data)
  print(df_medias_filtradas[])
  print(mean(df_medias_filtradas$Media))
  
  # Plotar o gráfico com os dados filtrados
  mediaGraph <<- ggplot(df_medias_filtradas, aes(x = Questao, y = Media)) +
    geom_bar(stat = "identity", fill = "skyblue") +
    geom_text(aes(label = round(Media, 3)), vjust = -0.5) +
    labs(x = "Questão", y="") +
    theme_minimal()
  
  # Mostrar o gráfico no dashboard
  print(mediaGraph)
})
```



RELATORO RMD

---
title: "pdf certification"
output: pdf_document
date: "2024-07-31"
params:
  plot:
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
```


## Auto av discente

```{r, echo = FALSE}
library(ggplot2)
library(shiny)

print(boxplotGraph)
```

## Média Auto Avaliação Discente

```{r, echo = FALSE}
print(mediaGraph)
```


## Coluna Agrupada

```{r, echo = FALSE}
print(colunaAgrupada)
```
